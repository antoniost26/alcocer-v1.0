const { Client, Message } = require("discord.js");
require("dotenv").config();
const scammerIdSchema = require("../../models/scammerIds.js");
const { devs, scammersIdChannelId } = require("../../../config.json");

/**
 *
 * @param {Client} client
 * @param {Message} message
 */
module.exports = async (client, message) => {
    if (!message.inGuild || message.author.bot) return;
    if (!message.content.startsWith(process.env.COMMAND_PREFIX)) return;
    if (
        !(
            message.guildId === "829600493398786078" ||
            message.guildId === "1119350182346244178"
        )
    )
        return;
    if (message.content.length > 100) return;
    if (!(message.channelId === scammersIdChannelId)) return;

    const command = "construct";

    if (
        message.content.substring(
            process.env.COMMAND_PREFIX.length,
            process.env.COMMAND_PREFIX.length + command.length
        ) == command
    ) {
        if (!devs.includes(message.member.id)) return;

        try {
            const _ = require('lodash/array');
            const scammerIdsCursor = scammerIdSchema.find();
            let scammerIds = [];
            for await (const scammerId of scammerIdsCursor)
                scammerIds.push(scammerId.userid);
            const chunkedScammerIds = _.chunk(scammerIds, 50);
            let embeds = [];
            chunkedScammerIds.forEach((chunkedScammerId, myindex) => {
                const exampleEmbed = {
		    color: 0x2b2d31,
                    title: myindex+1,
                    description: chunkedScammerId.join(" "),
                    footer: {
                        text: `generated by ${client.user.username}`,
                        iconURL: client.user.displayAvatarURL()
                    },
                }
                embeds.push(exampleEmbed);
            });
            chunkedEmbeds = _.chunk(embeds, 5);
            chunkedEmbeds.forEach(async chunkedEmbed => await message.channel.send({embeds: chunkedEmbed}));
        } catch (error) {
            console.log(
                `Error constructing embeds:\n ${error}`
            );
        }
    }
};
